







à
à
à
à
à
#defineINITIAL_BUFFER1
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
//Argisthefileininput
//Convertthembacktostrings
//Findifthereisaleadingnumber,0ifnot
//Ifthey'reequalthensortbystring
//Reversedandnumericalchangedependingonoptionsincommandline
//Sortbydiffernceinnumber¹
//break;
//case0:
//returnstrcmp(aa,bb);
;
FILE*infile;
FILE*outfile;
amountOfStrings++;
amountOfStrings=stringPos;
break;
break;
break;
break;
break;
break;
break;
break;
break;
break;
break;
break;
case'-':
case'h':
case'n':
case'o':
case'r':
case0:
case0:
case1:
case1:
char**strings=malloc(INITIAL_BUFFER*sizeof(char*));
char*inputFileName=argv[i];
char*line=malloc(1*(sizeof(char)));
char*outputFileName=argv[i];
charcharacter='s';
constchar*aa=*(constchar**)a;
constchar*aa=*(constchar**)a;
constchar*bb=*(constchar**)b;
constchar*bb=*(constchar**)b;
default:
default:
elseif(character=='\n'){1
else{
else{
else{
eof=1;
exit(1);
exit(1);
exit(1);
exit(1);
exit(1);
exit(1);
exit(1);
exit(1);à
fOpened=1;
fclose(infile);
for(inti=0;i<amountOfStrings;i++){û
for(inti=0;i<amountOfStrings;i++){û
for(inti=amountOfStrings-1;i>=0;i--){
for(inti=amountOfStrings-1;i>=0;i--){
fprintf(outfile,"%s\n",strings[i]);
fprintf(outfile,"%s\n",strings[i]);
fprintf(stderr,"%s%s\n",argv[i],"isnotavalidargument");
fprintf(stderr,"%s\n","Failedtoreservememoryforline");
fprintf(stderr,"%s\n","Failedtoreservememoryforline");
fprintf(stderr,"%s\n","Failedtoreservememoryforstrings");ª
fprintf(stderr,"%s\n","Failedtoreservememoryforstrings");
fprintf(stderr,"Invalidnumberofarguments");
fprintf(stderr,"Unabletocreate/findoutputfile");
fprintf(stderr,"Unabletofindinputfile\n");
fprintf(stdout,"%s\n",strings[i]);
fprintf(stdout,"%s\n",strings[i]);û
free(line);÷
i++;
i++;ÿ
if(aDigit==bDigit){
if(amountOfStrings>INITIAL_BUFFER){
if(argc==1){
if(fOpened==0){
if(fscanf(infile,"%c",&character)==EOF){ñ
if(infile){
if(line==NULL)
if(line==NULL){
if(lineSize>INITIAL_BUFFER){
if(outfile!=NULL){
if(outfile!=NULL){V
if(outfile==NULL){
if(strings==NULL)
if(strings==NULL){
infile=fopen(inputFileName,"r");
intaDigit=atoi(aa);
intamountOfStrings=0;
intbDigit=atoi(bb);
intcompareStrings(constvoid*a,constvoid*b){
inteof=0;
intfOpened=0;
inti=1;
intlineSize=1;
intmain(intargc,char*argv[]){
intnumerical=0;
intpos=0;
intreversed=0;
intstringPos=0;
line=(char*)realloc(line,(lineSize+INITIAL_BUFFER)*(sizeof(char)));
lineSize++;
line[pos+1]='\0';
line[pos]=character;
numerical=1;
outfile=fopen(outputFileName,"w");
pos++;
printf("%s\n%s\n%s\n%s\n","-ospecifiesoutputfile","-rreversesthesortorder","-nfornumericalvalues","Currentlyimplemented,reverse,outputfileandnumericalvalues");
qsort(strings,amountOfStrings,sizeof(char*),compareNumericalStrings);
qsort(strings,amountOfStrings,sizeof(char*),compareStrings);
returnaDigit-bDigit;
returnstrcmp(aa,bb);
returnstrcmp(aa,bb);
reversed=1;
strcpy(strings[stringPos],line);
stringPos++;ÿ
strings=(char**)realloc(strings,(amountOfStrings+INITIAL_BUFFER)*sizeof(char*));
strings[stringPos]=malloc(sizeof(line));a
switch(argv[i][0]){
switch(argv[i][1]){
switch(numerical){U
switch(reversed){ø
while(character!='\n'){
while(eof==0){
while(i<argc){
{
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}›
}›
}›
}›
}›
} 
}›
}›
}›
}›
}›
}›
}›
